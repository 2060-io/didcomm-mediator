{{/* Service resource definition */}}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "didcomm-mediator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{ include "didcomm-mediator.labels" . | nindent 4 }}
spec:
  selector:
    {{ include "didcomm-mediator.selectorLabels" . | nindent 4 }}
  ports:
    - name: http
      port: 80
      targetPort: 4000
      protocol: TCP
---
{{/* Ingress resource definition */}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "didcomm-mediator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{ include "didcomm-mediator.labels" . | nindent 4 }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ tpl .Values.ingress.host . }}
      secretName: {{ tpl .Values.ingress.tlsSecret . }}
  rules:
    - host: {{ tpl .Values.ingress.host . }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "didcomm-mediator.fullname" . }}
                port:
                  number: 80
---
{{/* StatefulSet resource definition */}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "didcomm-mediator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{ include "didcomm-mediator.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Values.statefulset.serviceName }}
  replicas: {{ .Values.statefulset.replicas }}
  selector:
    matchLabels:
      {{ include "didcomm-mediator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{ include "didcomm-mediator.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.statefulset.containerName }}
          image: io2060/didcomm-mediator:{{ .Chart.Version }}
          imagePullPolicy: {{ .Values.statefulset.image.pullPolicy }}
          ports:
            - containerPort: 4000
          env:
            {{- range $key, $val := .Values.statefulset.env }}
            - name: {{ $key }}
              value: {{ tpl (printf "%q" $val) $ }}
            {{- end }}
          resources:
            requests:
              memory: {{ .Values.statefulset.resources.requests.memory | quote }}
              cpu: {{ .Values.statefulset.resources.requests.cpu | quote }}
            limits:
              memory: {{ .Values.statefulset.resources.limits.memory | quote }}
              cpu: {{ .Values.statefulset.resources.limits.cpu | quote }}
          volumeMounts:
            - name: cloud-agent-wallet-pv
              mountPath: /root/.afj
            - name: firebase-config-volume
              mountPath: /config
              readOnly: false
      volumes:
        - name: firebase-config-volume
          configMap:
            name: firebase-config
  volumeClaimTemplates:
    - metadata:
        name: cloud-agent-wallet-pv
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.statefulset.storage }}
